{
  "name": "project",
  "type": "registry:block",
  "dependencies": [
    "@agoralabs-sh/avm-web-provider",
    "@algorandfoundation/algokit-utils",
    "@algorandfoundation/algorand-typescript",
    "@blockshake/defly-connect",
    "@hookform/resolvers",
    "@perawallet/connect",
    "@txnlab/use-wallet-react",
    "@walletconnect/modal",
    "algosdk",
    "cmdk",
    "input-otp",
    "lucide-react",
    "next-themes",
    "notistack",
    "radix-ui",
    "react-day-picker",
    "react-hook-form",
    "react-resizable-panels",
    "recharts",
    "sonner",
    "vaul",
    "zod"
  ],
  "devDependencies": [
    "@algorandfoundation/algokit-client-generator",
    "@algorandfoundation/algokit-utils-debug",
    "@algorandfoundation/puya-ts",
    "@biomejs/biome",
    "@rollup/plugin-typescript",
    "@walletconnect/sign-client",
    "dotenv",
    "lute-connect",
    "ts-node-dev",
    "tw-animate-css"
  ],
  "registryDependencies": [
    "button",
    "card",
    "dialog",
    "input",
    "label",
    "separator",
    "sonner"
  ],
  "files": [
    {
      "path": "app/globals.css",
      "content": "@import \"tailwindcss\";\n@import \"tw-animate-css\";\n\n@custom-variant dark (&:is(.dark *));\n\n@theme inline {\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --font-sans: var(--font-geist-sans);\n  --font-mono: var(--font-geist-mono);\n  --color-sidebar-ring: var(--sidebar-ring);\n  --color-sidebar-border: var(--sidebar-border);\n  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n  --color-sidebar-accent: var(--sidebar-accent);\n  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);\n  --color-sidebar-primary: var(--sidebar-primary);\n  --color-sidebar-foreground: var(--sidebar-foreground);\n  --color-sidebar: var(--sidebar);\n  --color-chart-5: var(--chart-5);\n  --color-chart-4: var(--chart-4);\n  --color-chart-3: var(--chart-3);\n  --color-chart-2: var(--chart-2);\n  --color-chart-1: var(--chart-1);\n  --color-ring: var(--ring);\n  --color-input: var(--input);\n  --color-border: var(--border);\n  --color-destructive: var(--destructive);\n  --color-accent-foreground: var(--accent-foreground);\n  --color-accent: var(--accent);\n  --color-muted-foreground: var(--muted-foreground);\n  --color-muted: var(--muted);\n  --color-secondary-foreground: var(--secondary-foreground);\n  --color-secondary: var(--secondary);\n  --color-primary-foreground: var(--primary-foreground);\n  --color-primary: var(--primary);\n  --color-popover-foreground: var(--popover-foreground);\n  --color-popover: var(--popover);\n  --color-card-foreground: var(--card-foreground);\n  --color-card: var(--card);\n  --radius-sm: calc(var(--radius) - 4px);\n  --radius-md: calc(var(--radius) - 2px);\n  --radius-lg: var(--radius);\n  --radius-xl: calc(var(--radius) + 4px);\n}\n\n:root {\n  --radius: 0.625rem;\n  --background: oklch(1 0 0);\n  --foreground: oklch(0.141 0.005 285.823);\n  --card: oklch(1 0 0);\n  --card-foreground: oklch(0.141 0.005 285.823);\n  --popover: oklch(1 0 0);\n  --popover-foreground: oklch(0.141 0.005 285.823);\n  --primary: oklch(0.21 0.006 285.885);\n  --primary-foreground: oklch(0.985 0 0);\n  --secondary: oklch(0.967 0.001 286.375);\n  --secondary-foreground: oklch(0.21 0.006 285.885);\n  --muted: oklch(0.967 0.001 286.375);\n  --muted-foreground: oklch(0.552 0.016 285.938);\n  --accent: oklch(0.967 0.001 286.375);\n  --accent-foreground: oklch(0.21 0.006 285.885);\n  --destructive: oklch(0.577 0.245 27.325);\n  --border: oklch(0.92 0.004 286.32);\n  --input: oklch(0.92 0.004 286.32);\n  --ring: oklch(0.705 0.015 286.067);\n  --chart-1: oklch(0.646 0.222 41.116);\n  --chart-2: oklch(0.6 0.118 184.704);\n  --chart-3: oklch(0.398 0.07 227.392);\n  --chart-4: oklch(0.828 0.189 84.429);\n  --chart-5: oklch(0.769 0.188 70.08);\n  --sidebar: oklch(0.985 0 0);\n  --sidebar-foreground: oklch(0.141 0.005 285.823);\n  --sidebar-primary: oklch(0.21 0.006 285.885);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.967 0.001 286.375);\n  --sidebar-accent-foreground: oklch(0.21 0.006 285.885);\n  --sidebar-border: oklch(0.92 0.004 286.32);\n  --sidebar-ring: oklch(0.705 0.015 286.067);\n}\n\n.dark {\n  --background: oklch(0.141 0.005 285.823);\n  --foreground: oklch(0.985 0 0);\n  --card: oklch(0.21 0.006 285.885);\n  --card-foreground: oklch(0.985 0 0);\n  --popover: oklch(0.21 0.006 285.885);\n  --popover-foreground: oklch(0.985 0 0);\n  --primary: oklch(0.92 0.004 286.32);\n  --primary-foreground: oklch(0.21 0.006 285.885);\n  --secondary: oklch(0.274 0.006 286.033);\n  --secondary-foreground: oklch(0.985 0 0);\n  --muted: oklch(0.274 0.006 286.033);\n  --muted-foreground: oklch(0.705 0.015 286.067);\n  --accent: oklch(0.274 0.006 286.033);\n  --accent-foreground: oklch(0.985 0 0);\n  --destructive: oklch(0.704 0.191 22.216);\n  --border: oklch(1 0 0 / 10%);\n  --input: oklch(1 0 0 / 15%);\n  --ring: oklch(0.552 0.016 285.938);\n  --chart-1: oklch(0.488 0.243 264.376);\n  --chart-2: oklch(0.696 0.17 162.48);\n  --chart-3: oklch(0.769 0.188 70.08);\n  --chart-4: oklch(0.627 0.265 303.9);\n  --chart-5: oklch(0.645 0.246 16.439);\n  --sidebar: oklch(0.21 0.006 285.885);\n  --sidebar-foreground: oklch(0.985 0 0);\n  --sidebar-primary: oklch(0.488 0.243 264.376);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.274 0.006 286.033);\n  --sidebar-accent-foreground: oklch(0.985 0 0);\n  --sidebar-border: oklch(1 0 0 / 10%);\n  --sidebar-ring: oklch(0.552 0.016 285.938);\n}\n\n@layer base {\n  * {\n    @apply border-border outline-ring/50;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n",
      "type": "registry:block",
      "target": "examples/app/globals.css"
    },
    {
      "path": "app/layout.tsx",
      "content": "import type { Metadata } from \"next\";\nimport { Geist, Geist_Mono } from \"next/font/google\";\nimport \"./globals.css\";\nimport ErrorBoundary from \"@/components/ErrorBoundary\";\nimport Provider from \"@/components/Provider\";\n\nconst geistSans = Geist({\n  variable: \"--font-geist-sans\",\n  subsets: [\"latin\"],\n});\n\nconst geistMono = Geist_Mono({\n  variable: \"--font-geist-mono\",\n  subsets: [\"latin\"],\n});\n\nexport const metadata: Metadata = {\n  title: \"Create Next App\",\n  description: \"Generated by create next app\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\">\n      <body\n        className={`${geistSans.variable} ${geistMono.variable} antialiased`}\n      >\n        <ErrorBoundary>\n          <Provider>{children}</Provider>\n        </ErrorBoundary>\n      </body>\n    </html>\n  );\n}\n",
      "type": "registry:component",
      "target": "examples/app/layout.tsx"
    },
    {
      "path": "app/page.tsx",
      "content": "import Home from \"@/components/Home\";\nexport default function App() {\n  return <Home />;\n}\n",
      "type": "registry:page",
      "target": "examples/app/page.tsx"
    },
    {
      "path": "components/Account.tsx",
      "content": "import { useWallet } from \"@txnlab/use-wallet-react\";\nimport { ExternalLink, Globe, Wallet } from \"lucide-react\";\nimport { useMemo } from \"react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { ellipseAddress } from \"../utils/ellipseAddress\";\nimport { getAlgodConfigFromEnvironment } from \"../utils/network/getAlgoClientConfigs\";\n\nconst Account = () => {\n  const { activeAddress } = useWallet();\n  const algoConfig = getAlgodConfigFromEnvironment();\n\n  const networkName = useMemo(() => {\n    return algoConfig.network === \"\"\n      ? \"localnet\"\n      : algoConfig.network.toLocaleLowerCase();\n  }, [algoConfig.network]);\n\n  const networkColor = useMemo(() => {\n    switch (networkName) {\n      case \"mainnet\":\n        return \"bg-green-100 text-green-800 border-green-200\";\n      case \"testnet\":\n        return \"bg-blue-100 text-blue-800 border-blue-200\";\n      case \"localnet\":\n        return \"bg-orange-100 text-orange-800 border-orange-200\";\n      default:\n        return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  }, [networkName]);\n\n  return (\n    <Card className=\"bg-gradient-to-r from-blue-50 to-purple-50 border-blue-200\">\n      <CardContent className=\"p-4 space-y-3\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Wallet className=\"w-4 h-4 text-blue-600\" />\n            <span className=\"text-sm font-medium text-gray-700\">\n              Connected Account\n            </span>\n          </div>\n          <Badge className={`${networkColor} font-medium`}>\n            <Globe className=\"w-3 h-3 mr-1\" />\n            {networkName}\n          </Badge>\n        </div>\n\n        <div className=\"flex items-center gap-2\">\n          <a\n            className=\"text-blue-600 hover:text-blue-800 font-mono text-sm flex items-center gap-1 hover:underline transition-colors\"\n            href={`https://lora.algokit.io/${networkName}/account/${activeAddress}/`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {ellipseAddress(activeAddress)}\n            <ExternalLink className=\"w-3 h-3\" />\n          </a>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default Account;\n",
      "type": "registry:component",
      "target": "components/Account.tsx"
    },
    {
      "path": "components/AppCalls.tsx",
      "content": "\"use client\";\nimport { AlgorandClient } from \"@algorandfoundation/algokit-utils\";\nimport {\n  OnSchemaBreak,\n  OnUpdate,\n} from \"@algorandfoundation/algokit-utils/types/app\";\nimport { useWallet } from \"@txnlab/use-wallet-react\";\nimport { Code, Loader2, Sparkles } from \"lucide-react\";\nimport { useSnackbar } from \"notistack\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { HelloWorldFactory } from \"../contracts/hello_world\";\nimport {\n  getAlgodConfigFromEnvironment,\n  getIndexerConfigFromEnvironment,\n} from \"../utils/network/getAlgoClientConfigs\";\n\ninterface AppCallsInterface {\n  openModal: boolean;\n  setModalState: (value: boolean) => void;\n}\n\nconst AppCalls = ({ openModal, setModalState }: AppCallsInterface) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [contractInput, setContractInput] = useState<string>(\"\");\n  const { enqueueSnackbar } = useSnackbar();\n  const { transactionSigner, activeAddress } = useWallet();\n\n  const algodConfig = getAlgodConfigFromEnvironment();\n  const indexerConfig = getIndexerConfigFromEnvironment();\n  const algorand = AlgorandClient.fromConfig({\n    algodConfig,\n    indexerConfig,\n  });\n  algorand.setDefaultSigner(transactionSigner);\n\n  const sendAppCall = async () => {\n    setLoading(true);\n\n    // Please note, in typical production scenarios,\n    // you wouldn't want to use deploy directly from your frontend.\n    // Instead, you would deploy your contract on your backend and reference it by id.\n    // Given the simplicity of the starter contract, we are deploying it on the frontend\n    // for demonstration purposes.\n    const factory = new HelloWorldFactory({\n      defaultSender: activeAddress ?? undefined,\n      algorand,\n    });\n    const deployResult = await factory\n      .deploy({\n        onSchemaBreak: OnSchemaBreak.AppendApp,\n        onUpdate: OnUpdate.AppendApp,\n      })\n      .catch((error: Error) => {\n        console.error(\"Contract deployment failed:\", error);\n        enqueueSnackbar(`Error deploying the contract: ${error.message}`, {\n          variant: \"error\",\n        });\n        setLoading(false);\n        return;\n      });\n\n    if (!deployResult) {\n      return;\n    }\n\n    const { appClient } = deployResult;\n\n    const response = await appClient.send\n      .hello({ args: { name: contractInput } })\n      .catch((error: Error) => {\n        console.error(\"Contract call failed:\", error);\n        enqueueSnackbar(`Error calling the contract: ${error.message}`, {\n          variant: \"error\",\n        });\n        setLoading(false);\n        return;\n      });\n\n    if (!response) {\n      return;\n    }\n\n    enqueueSnackbar(`Response from the contract: ${response.return}`, {\n      variant: \"success\",\n    });\n    setContractInput(\"\");\n    setLoading(false);\n  };\n\n  return (\n    <Dialog open={openModal} onOpenChange={setModalState}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Code className=\"w-5 h-5\" />\n            Smart Contract Interaction\n          </DialogTitle>\n          <DialogDescription>\n            Say hello to your Algorand smart contract! This will deploy and\n            interact with a simple contract.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"contract-input\">Message for Hello Function</Label>\n            <Input\n              id=\"contract-input\"\n              placeholder=\"Enter your name or message\"\n              value={contractInput}\n              onChange={(e) => setContractInput(e.target.value)}\n              className=\"border-gray-200 focus:border-purple-500\"\n            />\n          </div>\n\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3\">\n            <p className=\"text-sm text-blue-800\">\n              <strong>Note:</strong> This will deploy a new contract instance\n              for demonstration purposes. In production, contracts are typically\n              deployed once and referenced by ID.\n            </p>\n          </div>\n\n          <div className=\"flex gap-2 pt-4\">\n            <Button\n              variant=\"outline\"\n              className=\"flex-1\"\n              onClick={() => setModalState(false)}\n            >\n              Close\n            </Button>\n            <Button\n              className=\"flex-1 bg-purple-600 hover:bg-purple-700\"\n              disabled={!contractInput.trim() || loading}\n              onClick={sendAppCall}\n            >\n              {loading ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Processing...\n                </>\n              ) : (\n                <>\n                  <Sparkles className=\"w-4 h-4 mr-2\" />\n                  Send Contract Call\n                </>\n              )}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default AppCalls;\n",
      "type": "registry:component",
      "target": "components/AppCalls.tsx"
    },
    {
      "path": "components/ConnectWallet.tsx",
      "content": "import { useWallet, type Wallet, WalletId } from \"@txnlab/use-wallet-react\";\nimport { LogOut, Wallet as WalletIcon } from \"lucide-react\";\nimport Image from \"next/image\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Separator } from \"@/components/ui/separator\";\nimport Account from \"./Account\";\n\ninterface ConnectWalletInterface {\n  openModal: boolean;\n  closeModal: () => void;\n}\n\nconst ConnectWallet = ({ openModal, closeModal }: ConnectWalletInterface) => {\n  const { wallets, activeAddress } = useWallet();\n\n  const isKmd = (wallet: Wallet) => wallet.id === WalletId.KMD;\n\n  return (\n    <Dialog open={openModal} onOpenChange={closeModal}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <WalletIcon className=\"w-5 h-5\" />\n            Select Wallet Provider\n          </DialogTitle>\n          <DialogDescription>\n            Choose your preferred wallet to connect to the Algorand network.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {activeAddress && (\n            <div className=\"space-y-4\">\n              <Account />\n              <Separator />\n            </div>\n          )}\n\n          {!activeAddress && (\n            <div className=\"space-y-2\">\n              {wallets?.map((wallet) => (\n                <Button\n                  key={`provider-${wallet.id}`}\n                  variant=\"outline\"\n                  className=\"w-full justify-start h-12 hover:bg-blue-50 border-gray-200 hover:border-blue-300\"\n                  data-test-id={`${wallet.id}-connect`}\n                  onClick={() => wallet.connect()}\n                >\n                  {!isKmd(wallet) && (\n                    <Image\n                      alt={`${wallet.metadata.name} icon`}\n                      src={wallet.metadata.icon}\n                      width={24}\n                      height={24}\n                      className=\"mr-3 object-contain\"\n                    />\n                  )}\n                  {isKmd(wallet) && <WalletIcon className=\"w-6 h-6 mr-3\" />}\n                  <span className=\"font-medium\">\n                    {isKmd(wallet) ? \"LocalNet Wallet\" : wallet.metadata.name}\n                  </span>\n                </Button>\n              ))}\n            </div>\n          )}\n\n          <div className=\"flex gap-2 pt-4\">\n            <Button\n              variant=\"outline\"\n              className=\"flex-1\"\n              data-test-id=\"close-wallet-modal\"\n              onClick={closeModal}\n            >\n              Close\n            </Button>\n            {activeAddress && (\n              <Button\n                variant=\"destructive\"\n                className=\"flex-1\"\n                data-test-id=\"logout\"\n                onClick={async () => {\n                  if (wallets) {\n                    const activeWallet = wallets.find((w) => w.isActive);\n                    if (activeWallet) {\n                      await activeWallet.disconnect();\n                    } else {\n                      // Required for logout/cleanup of inactive providers\n                      localStorage.removeItem(\"@txnlab/use-wallet:v3\");\n                      window.location.reload();\n                    }\n                  }\n                }}\n              >\n                <LogOut className=\"w-4 h-4 mr-2\" />\n                Logout\n              </Button>\n            )}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};\nexport default ConnectWallet;\n",
      "type": "registry:component",
      "target": "components/ConnectWallet.tsx"
    },
    {
      "path": "components/ErrorBoundary.tsx",
      "content": "\"use client\";\n\nimport React, { type ReactNode } from \"react\";\n\ninterface ErrorBoundaryProps {\n  children: ReactNode;\n}\n\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error: Error | null;\n}\n\nclass ErrorBoundary extends React.Component<\n  ErrorBoundaryProps,\n  ErrorBoundaryState\n> {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = { hasError: false, error: null };\n  }\n\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true, error };\n  }\n\n  render(): ReactNode {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return (\n        <div className=\"hero min-h-screen bg-teal-400\">\n          <div className=\"hero-content mx-auto max-w-md rounded-lg bg-white p-6 text-center\">\n            <div className=\"max-w-md\">\n              <h1 className=\"text-4xl\">Error occured</h1>\n              <p className=\"py-6\">\n                {this.state.error?.message.includes(\n                  \"Attempt to get default algod configuration\",\n                )\n                  ? \"Please make sure to set up your environment variables correctly. Create a .env file based on .env.template and fill in the required values. This controls the network and credentials for connections with Algod and Indexer.\"\n                  : this.state.error?.message}\n              </p>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n",
      "type": "registry:component",
      "target": "components/ErrorBoundary.tsx"
    },
    {
      "path": "components/Home.tsx",
      "content": "// src/components/Home.tsx\n\"use client\";\n\nimport { useWallet } from \"@txnlab/use-wallet-react\";\nimport { Code, ExternalLink, Send, Wallet } from \"lucide-react\";\nimport type React from \"react\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport AppCalls from \"./AppCalls\";\nimport ConnectWallet from \"./ConnectWallet\";\nimport Transact from \"./Transact\";\n\nconst Home: React.FC = () => {\n  const [openWalletModal, setOpenWalletModal] = useState<boolean>(false);\n  const [openDemoModal, setOpenDemoModal] = useState<boolean>(false);\n  const [appCallsDemoModal, setAppCallsDemoModal] = useState<boolean>(false);\n  const { activeAddress } = useWallet();\n\n  const toggleWalletModal = () => {\n    setOpenWalletModal(!openWalletModal);\n  };\n\n  const toggleDemoModal = () => {\n    setOpenDemoModal(!openDemoModal);\n  };\n\n  const toggleAppCallsModal = () => {\n    setAppCallsDemoModal(!appCallsDemoModal);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md shadow-xl border-0 bg-white/80 backdrop-blur-sm\">\n        <CardHeader className=\"text-center space-y-4\">\n          <div className=\"mx-auto w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center text-white text-2xl font-bold\">\n            A\n          </div>\n          <CardTitle className=\"text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n            Welcome to AlgoKit\n          </CardTitle>\n          <CardDescription className=\"text-gray-600 leading-relaxed\">\n            This starter has been generated using the official AlgoKit Nextjs 15\n            template. Get started building on Algorand!\n          </CardDescription>\n        </CardHeader>\n\n        <CardContent className=\"space-y-4\">\n          <Button\n            data-test-id=\"getting-started\"\n            className=\"w-full bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white shadow-lg\"\n            asChild\n          >\n            <a\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href=\"https://github.com/algorandfoundation/algokit-cli\"\n            >\n              <ExternalLink className=\"w-4 h-4 mr-2\" />\n              Getting Started\n            </a>\n          </Button>\n\n          <Separator className=\"my-6\" />\n\n          <div className=\"space-y-3\">\n            <Button\n              data-test-id=\"connect-wallet\"\n              variant=\"outline\"\n              className=\"w-full hover:bg-blue-50 border-blue-200 hover:border-blue-300\"\n              onClick={toggleWalletModal}\n            >\n              <Wallet className=\"w-4 h-4 mr-2\" />\n              Wallet Connection\n            </Button>\n\n            {activeAddress && (\n              <Button\n                data-test-id=\"transactions-demo\"\n                variant=\"outline\"\n                className=\"w-full hover:bg-green-50 border-green-200 hover:border-green-300\"\n                onClick={toggleDemoModal}\n              >\n                <Send className=\"w-4 h-4 mr-2\" />\n                Transactions Demo\n              </Button>\n            )}\n\n            {activeAddress && (\n              <Button\n                data-test-id=\"appcalls-demo\"\n                variant=\"outline\"\n                className=\"w-full hover:bg-purple-50 border-purple-200 hover:border-purple-300\"\n                onClick={toggleAppCallsModal}\n              >\n                <Code className=\"w-4 h-4 mr-2\" />\n                Contract Interactions\n              </Button>\n            )}\n          </div>\n\n          <ConnectWallet\n            openModal={openWalletModal}\n            closeModal={toggleWalletModal}\n          />\n          <Transact\n            openModal={openDemoModal}\n            setModalState={setOpenDemoModal}\n          />\n          <AppCalls\n            openModal={appCallsDemoModal}\n            setModalState={setAppCallsDemoModal}\n          />\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default Home;\n",
      "type": "registry:component",
      "target": "components/Home.tsx"
    },
    {
      "path": "components/Provider.tsx",
      "content": "\"use client\";\n\nimport {\n  type SupportedWallet,\n  WalletId,\n  WalletManager,\n  WalletProvider,\n} from \"@txnlab/use-wallet-react\";\nimport { SnackbarProvider } from \"notistack\";\nimport {\n  getAlgodConfigFromEnvironment,\n  getKmdConfigFromEnvironment,\n} from \"@/utils/network/getAlgoClientConfigs\";\n\nlet supportedWallets: SupportedWallet[];\nif (process.env.NEXT_PUBLIC_ALGOD_NETWORK === \"localnet\") {\n  const kmdConfig = getKmdConfigFromEnvironment();\n  supportedWallets = [\n    {\n      id: WalletId.KMD,\n      options: {\n        baseServer: kmdConfig.server,\n        token: String(kmdConfig.token),\n        port: String(kmdConfig.port),\n      },\n    },\n  ];\n} else {\n  supportedWallets = [\n    { id: WalletId.DEFLY },\n    { id: WalletId.PERA },\n    { id: WalletId.EXODUS },\n    // If you are interested in WalletConnect v2 provider\n    // refer to https://github.com/TxnLab/use-wallet for detailed integration instructions\n  ];\n}\n\nexport default function Provider({ children }: { children: React.ReactNode }) {\n  const algodConfig = getAlgodConfigFromEnvironment();\n\n  const walletManager = new WalletManager({\n    wallets: supportedWallets,\n    defaultNetwork: algodConfig.network,\n    networks: {\n      [algodConfig.network]: {\n        algod: {\n          baseServer: algodConfig.server,\n          port: algodConfig.port,\n          token: String(algodConfig.token),\n        },\n      },\n    },\n    options: {\n      resetNetwork: true,\n    },\n  });\n\n  return (\n    <SnackbarProvider maxSnack={3}>\n      <WalletProvider manager={walletManager}>{children}</WalletProvider>\n    </SnackbarProvider>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/Provider.tsx"
    },
    {
      "path": "components/Transact.tsx",
      "content": "import { AlgorandClient, algo } from \"@algorandfoundation/algokit-utils\";\nimport { useWallet } from \"@txnlab/use-wallet-react\";\nimport { Loader2, Send } from \"lucide-react\";\nimport { useSnackbar } from \"notistack\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { getAlgodConfigFromEnvironment } from \"../utils/network/getAlgoClientConfigs\";\n\ninterface TransactInterface {\n  openModal: boolean;\n  setModalState: (value: boolean) => void;\n}\n\nconst Transact = ({ openModal, setModalState }: TransactInterface) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [receiverAddress, setReceiverAddress] = useState<string>(\"\");\n\n  const algodConfig = getAlgodConfigFromEnvironment();\n  const algorand = AlgorandClient.fromConfig({ algodConfig });\n\n  const { enqueueSnackbar } = useSnackbar();\n  const { transactionSigner, activeAddress } = useWallet();\n\n  const handleSubmitAlgo = async () => {\n    setLoading(true);\n\n    if (!activeAddress) {\n      enqueueSnackbar(\"Please connect wallet first\", { variant: \"warning\" });\n      setLoading(false);\n      return;\n    }\n\n    try {\n      enqueueSnackbar(\"Sending transaction...\", { variant: \"info\" });\n      const result = await algorand.send.payment({\n        signer: transactionSigner,\n        sender: activeAddress,\n        receiver: receiverAddress,\n        amount: algo(1),\n      });\n      enqueueSnackbar(`Transaction sent: ${result.txIds[0]}`, {\n        variant: \"success\",\n      });\n      setReceiverAddress(\"\");\n      setModalState(false);\n    } catch (error) {\n      console.error(\"Transaction failed:\", error);\n      enqueueSnackbar(\"Failed to send transaction\", { variant: \"error\" });\n    }\n\n    setLoading(false);\n  };\n\n  const isValidAddress = receiverAddress.length === 58;\n\n  return (\n    <Dialog open={openModal} onOpenChange={setModalState}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Send className=\"w-5 h-5\" />\n            Send Payment Transaction\n          </DialogTitle>\n          <DialogDescription>\n            Send 1 ALGO to another wallet address on the Algorand network.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"receiver-address\">Recipient Address</Label>\n            <Input\n              id=\"receiver-address\"\n              data-test-id=\"receiver-address\"\n              placeholder=\"Enter 58-character wallet address\"\n              value={receiverAddress}\n              onChange={(e) => setReceiverAddress(e.target.value)}\n              className={`${\n                receiverAddress && !isValidAddress\n                  ? \"border-red-300 focus:border-red-500\"\n                  : \"border-gray-200 focus:border-blue-500\"\n              }`}\n            />\n            {receiverAddress && !isValidAddress && (\n              <p className=\"text-sm text-red-600\">\n                Address must be exactly 58 characters long\n              </p>\n            )}\n          </div>\n\n          <div className=\"flex gap-2 pt-4\">\n            <Button\n              variant=\"outline\"\n              className=\"flex-1\"\n              onClick={() => setModalState(false)}\n            >\n              Cancel\n            </Button>\n            <Button\n              className=\"flex-1 bg-green-600 hover:bg-green-700\"\n              data-test-id=\"send-algo\"\n              disabled={!isValidAddress || loading}\n              onClick={handleSubmitAlgo}\n            >\n              {loading ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Sending...\n                </>\n              ) : (\n                <>\n                  <Send className=\"w-4 h-4 mr-2\" />\n                  Send 1 ALGO\n                </>\n              )}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default Transact;\n",
      "type": "registry:component",
      "target": "components/Transact.tsx"
    },
    {
      "path": "hooks/use-mobile.ts",
      "content": "import * as React from \"react\";\n\nconst MOBILE_BREAKPOINT = 768;\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(\n    undefined,\n  );\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`);\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);\n    };\n    mql.addEventListener(\"change\", onChange);\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);\n    return () => mql.removeEventListener(\"change\", onChange);\n  }, []);\n\n  return !!isMobile;\n}\n",
      "type": "registry:lib",
      "target": "hooks/use-mobile.ts"
    },
    {
      "path": "interfaces/network.ts",
      "content": "import type { AlgoClientConfig } from \"@algorandfoundation/algokit-utils/types/network-client\";\n\n// Define TokenHeader interface locally since the algosdk import path has changed\ninterface TokenHeader {\n  [key: string]: string;\n}\n\nexport interface AlgoViteClientConfig extends AlgoClientConfig {\n  /** Base URL of the server e.g. http://localhost, https://testnet-api.algonode.cloud/, etc. */\n  server: string;\n  /** The port to use e.g. 4001, 443, etc. */\n  port: string | number;\n  /** The token to use for API authentication (or undefined if none needed) - can be a string, or an object with the header key => value */\n  token: string | TokenHeader;\n  /** String representing current Algorand Network type (testnet/mainnet and etc) */\n  network: string;\n}\n\nexport interface AlgoViteKMDConfig extends AlgoClientConfig {\n  /** Base URL of the server e.g. http://localhost, https://testnet-api.algonode.cloud/, etc. */\n  server: string;\n  /** The port to use e.g. 4001, 443, etc. */\n  port: string | number;\n  /** The token to use for API authentication (or undefined if none needed) - can be a string, or an object with the header key => value */\n  token: string | TokenHeader;\n  /** KMD wallet name */\n  wallet: string;\n  /** KMD wallet password */\n  password: string;\n}\n",
      "type": "registry:lib",
      "target": "interfaces/network.ts"
    },
    {
      "path": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": "lib/utils.ts"
    },
    {
      "path": "public/file.svg",
      "content": "<svg fill=\"none\" viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z\" clip-rule=\"evenodd\" fill=\"#666\" fill-rule=\"evenodd\"/></svg>",
      "type": "registry:file",
      "target": "public/file.svg"
    },
    {
      "path": "public/globe.svg",
      "content": "<svg fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><g clip-path=\"url(#a)\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1\" fill=\"#666\"/></g><defs><clipPath id=\"a\"><path fill=\"#fff\" d=\"M0 0h16v16H0z\"/></clipPath></defs></svg>",
      "type": "registry:file",
      "target": "public/globe.svg"
    },
    {
      "path": "public/next.svg",
      "content": "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 394 80\"><path fill=\"#000\" d=\"M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z\"/><path fill=\"#000\" d=\"M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z\"/></svg>",
      "type": "registry:file",
      "target": "public/next.svg"
    },
    {
      "path": "public/vercel.svg",
      "content": "<svg fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1155 1000\"><path d=\"m577.3 0 577.4 1000H0z\" fill=\"#fff\"/></svg>",
      "type": "registry:file",
      "target": "public/vercel.svg"
    },
    {
      "path": "public/window.svg",
      "content": "<svg fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5\" fill=\"#666\"/></svg>",
      "type": "registry:file",
      "target": "public/window.svg"
    },
    {
      "path": "smart_contracts/hello_world/contract.algo.ts",
      "content": "import { Contract } from '@algorandfoundation/algorand-typescript'\n\nexport class HelloWorld extends Contract {\n  hello(name: string): string {\n    return `Hello, ${name}`\n  }\n}\n",
      "type": "registry:component",
      "target": "smart_contracts/hello_world/contract.algo.ts"
    },
    {
      "path": "smart_contracts/hello_world/deploy-config.ts",
      "content": "import { AlgorandClient } from '@algorandfoundation/algokit-utils'\nimport { HelloWorldFactory } from '../artifacts/hello_world/HelloWorldClient'\n\n// Below is a showcase of various deployment options you can use in TypeScript Client\nexport async function deploy() {\n  console.log('=== Deploying HelloWorld ===')\n\n  const algorand = AlgorandClient.fromEnvironment()\n  const deployer = await algorand.account.fromEnvironment('DEPLOYER')\n\n  const factory = algorand.client.getTypedAppFactory(HelloWorldFactory, {\n    defaultSender: deployer.addr,\n  })\n\n  const { appClient, result } = await factory.deploy({ onUpdate: 'append', onSchemaBreak: 'append' })\n\n  // If app was just created fund the app account\n  if (['create', 'replace'].includes(result.operationPerformed)) {\n    await algorand.send.payment({\n      amount: (1).algo(),\n      sender: deployer.addr,\n      receiver: appClient.appAddress,\n    })\n  }\n\n  const method = 'hello'  \n  const response = await appClient.send.hello({\n    args: { name: 'world' },\n  })\n  console.log(\n    `Called ${method} on ${appClient.appClient.appName} (${appClient.appClient.appId}) with name = world, received: ${response.return}`,\n  )\n}\n",
      "type": "registry:component",
      "target": "smart_contracts/hello_world/deploy-config.ts"
    },
    {
      "path": "smart_contracts/index.ts",
      "content": "import { Config } from '@algorandfoundation/algokit-utils'\nimport { registerDebugEventHandlers } from '@algorandfoundation/algokit-utils-debug'\nimport { consoleLogger } from '@algorandfoundation/algokit-utils/types/logging'\nimport * as fs from 'node:fs'\nimport * as path from 'node:path'\n\n// Uncomment the traceAll option to enable auto generation of AVM Debugger compliant sourceMap and simulation trace file for all AVM calls.\n// Learn more about using AlgoKit AVM Debugger to debug your TEAL source codes and inspect various kinds of Algorand transactions in atomic groups -> https://github.com/algorandfoundation/algokit-avm-vscode-Debugger\n\nConfig.configure({\n  logger: consoleLogger,\n  debug: true,\n  //  traceAll: true,\n})\nregisterDebugEventHandlers()\n\n// base directory\nconst baseDir = path.resolve(__dirname)\n\n// function to validate and dynamically import a module\nasync function importDeployerIfExists(dir: string) {\n  const deployerPath = path.resolve(dir, 'deploy-config')\n  if (fs.existsSync(deployerPath + '.ts') || fs.existsSync(deployerPath + '.js')) {\n    const deployer = await import(deployerPath)\n    return { ...deployer, name: path.basename(dir) }\n  }\n  return null\n}\n\n// get a list of all deployers from the subdirectories\nasync function getDeployers() {\n  const directories = fs\n    .readdirSync(baseDir, { withFileTypes: true })\n    .filter((dirent) => dirent.isDirectory())\n    .map((dirent) => path.resolve(baseDir, dirent.name))\n\n  const deployers = await Promise.all(directories.map(importDeployerIfExists))\n  return deployers.filter((deployer) => deployer !== null) // Filter out null values\n}\n\n// execute all the deployers\n(async () => {\n  const contractName = process.argv.length > 2 ? process.argv[2] : undefined\n  const contractDeployers = await getDeployers()\n  \n  const filteredDeployers = contractName\n    ? contractDeployers.filter(deployer => deployer.name === contractName)\n    : contractDeployers\n\n  if (contractName && filteredDeployers.length === 0) {\n    console.warn(`No deployer found for contract name: ${contractName}`)\n    return\n  }\n\n  for (const deployer of filteredDeployers) {\n    try {\n      await deployer.deploy()\n    } catch (e) {\n      console.error(`Error deploying ${deployer.name}:`, e)\n    }\n  }\n})()\n",
      "type": "registry:component",
      "target": "smart_contracts/index.ts"
    },
    {
      "path": "utils/ellipseAddress.ts",
      "content": "export function ellipseAddress(address: string | null, width = 6): string {\n  return address ? `${address.slice(0, width)}...${address.slice(-width)}` : (address ?? '')\n}\n",
      "type": "registry:lib",
      "target": "utils/ellipseAddress.ts"
    },
    {
      "path": "utils/network/getAlgoClientConfigs.ts",
      "content": "import { AlgoViteClientConfig, AlgoViteKMDConfig } from '../../interfaces/network'\n\nexport function getAlgodConfigFromEnvironment(): AlgoViteClientConfig {\n  if (!process.env.NEXT_PUBLIC_ALGOD_SERVER) {\n    throw new Error('Attempt to get default algod configuration without specifying NEXT_PUBLIC_ALGOD_SERVER in the environment variables')\n  }\n\n  return {\n    server: process.env.NEXT_PUBLIC_ALGOD_SERVER,\n    port: process.env.NEXT_PUBLIC_ALGOD_PORT || '',\n    token: process.env.NEXT_PUBLIC_ALGOD_TOKEN || '',\n    network: process.env.NEXT_PUBLIC_ALGOD_NETWORK || '',\n  }\n}\n\nexport function getIndexerConfigFromEnvironment(): AlgoViteClientConfig {\n  if (!process.env.NEXT_PUBLIC_INDEXER_SERVER) {\n    throw new Error('Attempt to get default indexer configuration without specifying NEXT_PUBLIC_INDEXER_SERVER in the environment variables')\n  }\n\n  return {\n    server: process.env.NEXT_PUBLIC_INDEXER_SERVER,\n    port: process.env.NEXT_PUBLIC_INDEXER_PORT || '',\n    token: process.env.NEXT_PUBLIC_INDEXER_TOKEN || '',\n    network: process.env.NEXT_PUBLIC_ALGOD_NETWORK || '',\n  }\n}\n\nexport function getKmdConfigFromEnvironment(): AlgoViteKMDConfig {\n  if (!process.env.NEXT_PUBLIC_KMD_SERVER) {\n    throw new Error('Attempt to get default kmd configuration without specifying NEXT_PUBLIC_KMD_SERVER in the environment variables')\n  }\n\n  return {\n    server: process.env.NEXT_PUBLIC_KMD_SERVER,\n    port: process.env.NEXT_PUBLIC_KMD_PORT || '',\n    token: process.env.NEXT_PUBLIC_KMD_TOKEN || '',\n    wallet: process.env.NEXT_PUBLIC_KMD_WALLET || '',\n    password: process.env.NEXT_PUBLIC_KMD_PASSWORD || '',\n  }\n}\n",
      "type": "registry:lib",
      "target": "utils/network/getAlgoClientConfigs.ts"
    },
    {
      "path": ".env.example",
      "content": "# ======================\n# LocalNet configuration\n# uncomment below to use\n# ======================\n\nNEXT_PUBLIC_ENVIRONMENT=local\n\n# Algod\nNEXT_PUBLIC_ALGOD_TOKEN=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nNEXT_PUBLIC_ALGOD_SERVER=http://localhost\nNEXT_PUBLIC_ALGOD_PORT=4001\nNEXT_PUBLIC_ALGOD_NETWORK=localnet\n\n# Indexer\nNEXT_PUBLIC_INDEXER_TOKEN=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nNEXT_PUBLIC_INDEXER_SERVER=http://localhost\nNEXT_PUBLIC_INDEXER_PORT=8980\n\n# KMD\n# Please note:\n# 1. This is only needed for LocalNet since\n# by default KMD provider is ignored on other networks.\n# 2. AlgoKit LocalNet starts with a single wallet called 'unencrypted-default-wallet',\n# with heaps of tokens available for testing.\nNEXT_PUBLIC_KMD_TOKEN=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nNEXT_PUBLIC_KMD_SERVER=http://localhost\nNEXT_PUBLIC_KMD_PORT=4002\nNEXT_PUBLIC_KMD_WALLET=\"unencrypted-default-wallet\"\nNEXT_PUBLIC_KMD_PASSWORD=\"\"\n\n# # ======================\n# # TestNet configuration:\n# # uncomment below to use\n# # ======================\n\n# VITE_ENVIRONMENT=local\n\n# # Algod\n# VITE_ALGOD_TOKEN=\"\"\n# VITE_ALGOD_SERVER=\"https://testnet-api.algonode.cloud\"\n# VITE_ALGOD_PORT=\"\"\n# VITE_ALGOD_NETWORK=\"testnet\"\n\n# # Indexer\n# VITE_INDEXER_TOKEN=\"\"\n# VITE_INDEXER_SERVER=\"https://testnet-idx.algonode.cloud\"\n# VITE_INDEXER_PORT=\"\"\n\n\n# # ======================\n# # MainNet configuration:\n# # uncomment below to use\n# # ======================\n\n# VITE_ENVIRONMENT=production\n\n# # Algod\n# VITE_ALGOD_TOKEN=\"\"\n# VITE_ALGOD_SERVER=\"https://mainnet-api.algonode.cloud\"\n# VITE_ALGOD_PORT=\"\"\n# VITE_ALGOD_NETWORK=\"mainnet\"\n\n# # Indexer\n# VITE_INDEXER_TOKEN=\"\"\n# VITE_INDEXER_SERVER=\"https://mainnet-idx.algonode.cloud\"\n# VITE_INDEXER_PORT=\"\"\n\n",
      "type": "registry:lib",
      "target": ".env.example"
    },
    {
      "path": ".algokit.toml",
      "content": "[algokit]\nmin_version = \"v2.6.0\"\n\n[generate.smart-contract]\ndescription = \"Generate a new smart contract for existing project\"\npath = \".algokit/generators/create_contract\"\n\n[generate.env-file]\ndescription = \"Generate a new generic or Algorand network specific .env file\"\npath = \".algokit/generators/create_env_file\"\n\n[project]\ntype = 'contract'\nname = 'typescript-contracts'\nartifacts = 'smart_contracts/artifacts'\n\n[project.deploy]\ncommand = \"pnpm deploy:ci\"\n\n[project.deploy.testnet]\nenvironment_secrets = [\n  \"DEPLOYER_MNEMONIC\",\n]\n\n[project.deploy.mainnet]\nenvironment_secrets = [\n  \"DEPLOYER_MNEMONIC\",\n]\n\n[project.run]\n# Commands intended for use locally and in CI\nalgobuild = { commands = [\n  'pnpm algobuild',\n], description = 'Build all smart contracts in the project' }\naudit-teal = { commands = [\n  # 🚨 IMPORTANT 🚨: For strict TEAL validation, remove --exclude statements. The default starter contract is not for production. Ensure thorough testing and adherence to best practices in smart contract development. This is not a replacement for a professional audit.\n  'algokit task analyze smart_contracts/artifacts --recursive --force --exclude rekey-to --exclude is-updatable --exclude missing-fee-check --exclude is-deletable --exclude can-close-asset --exclude can-close-account --exclude unprotected-deletable --exclude unprotected-updatable',\n], description = 'Audit TEAL files' }\n\n# Commands intented for CI only, prefixed with `ci-` by convention\nci-teal-diff = { commands = [\n  'git add -N ./smart_contracts/artifacts',\n  'git diff --exit-code --minimal ./smart_contracts/artifacts',\n], description = 'Check TEAL files for differences' }\ntest = { commands = ['pnpm test'], description = 'Run frontend tests' }",
      "type": "registry:lib",
      "target": ".algokit.toml"
    },
    {
      "path": "README.md",
      "content": "# Algorand Next.js Starter\n\nA full-stack starter template for building Algorand dApps with Next.js, TypeScript, and modern tooling. This project streamlines smart contract development, deployment, and frontend integration.\n\n---\n\n## Table of Contents\n\n- [Features](#features)\n- [Project Structure](#project-structure)\n- [Getting Started](#getting-started)\n- [Smart Contract Development](#smart-contract-development)\n  - [Writing Contracts](#writing-contracts)\n  - [Compiling & Generating Clients](#compiling--generating-clients)\n  - [Deploying Contracts](#deploying-contracts)\n- [Frontend Development](#frontend-development)\n- [Environment Configuration](#environment-configuration)\n- [Scripts Reference](#scripts-reference)\n- [Testing & Linting](#testing--linting)\n- [Troubleshooting](#troubleshooting)\n- [Resources](#resources)\n\n---\n\n## Features\n\n- **Next.js 15** with TypeScript, TailwindCSS, and Radix UI\n- **Algorand smart contract workflow**: Write, compile, generate clients, deploy\n- **Wallet integrations**: Defly, Pera, WalletConnect, etc.\n- **Reusable UI components** and hooks\n- **Modern developer experience**: Biome, pnpm, hot reload, type checking\n\n---\n\n## Project Structure\n\n```\nalgorand-nextjs-starter/\n├── smart_contracts/         # Write your Algorand smart contracts here\n│   ├── index.ts             # Contract deployment entrypoint\n│   ├── artifacts/           # Compiled contracts & generated clients\n│   └── ...                  # Contract source files\n├── contracts/               # Generated TypeScript clients for contracts\n├── components/              # Reusable React components\n├── app/                     # Next.js app directory\n├── utils/                   # Utility functions\n├── public/                  # Static assets\n├── .algokit.toml            # Algokit project config\n├── package.json             # Scripts & dependencies\n└── README.md                # This file\n```\n\n---\n\n## Getting Started\n\n### 1. Install Dependencies\n\n```bash\npnpm install\n```\n\n### 2. Environment Setup\n\nCreate a `.env` file for secrets (see [Environment Configuration](#environment-configuration)). You can use the generator:\n\n```bash\nalgokit generate env-file\n```\n\nOr manually add:\n\n```\nDEPLOYER_MNEMONIC=\"your 25-word mnemonic here\"\nALGOD_SERVER=\"https://testnet-api.algonode.cloud\"\nALGOD_TOKEN=\"\"\n```\n\n---\n\n## Smart Contract Development\n\n### Writing Contracts\n\n- Write your contracts in TypeScript inside `smart_contracts/`.\n- Example: `smart_contracts/hello_world/contract.algo.ts`\n\n### Compiling & Generating Clients\n\nCompile contracts and generate TypeScript clients with:\n\n```bash\npnpm generate\n```\n\nThis runs:\n- `pnpm algobuild`: Compiles contracts in `smart_contracts/` to TEAL and outputs to `smart_contracts/artifacts/`\n- Generates TypeScript clients in `contracts/` for each contract\n\nYou can also run steps individually:\n```bash\npnpm algobuild\npnpm generate:clients\n```\n\n### Deploying Contracts\n\nDeploy contracts to Algorand network:\n\n```bash\npnpm deploy\n```\n\nFor CI or production:\n```bash\npnpm deploy:ci\n```\n\nDeployment uses the mnemonic and network config from `.env`.\n\n---\n\n## Frontend Development\n\n- The Next.js app is in the `app/` directory.\n- UI components are in `components/` and `components/ui/`.\n- Use generated contract clients from `contracts/` to interact with Algorand smart contracts.\n- Wallet integrations are available via hooks and components.\n\nStart the development server:\n\n```bash\npnpm dev\n```\n\nBuild for production:\n\n```bash\npnpm build\npnpm start\n```\n\n---\n\n## Environment Configuration\n\n- `.env` file is required for deployment and contract interaction.\n- Example variables:\n  - `DEPLOYER_MNEMONIC`\n  - `ALGOD_SERVER`\n  - `ALGOD_TOKEN`\n- See `.algokit.toml` for more config options.\n\n---\n\n## Scripts Reference\n\n| Script              | Description                                      |\n|---------------------|--------------------------------------------------|\n| `pnpm dev`          | Start Next.js dev server                         |\n| `pnpm build`        | Build Next.js app                                |\n| `pnpm start`        | Start production server                          |\n| `pnpm algobuild`    | Compile smart contracts                          |\n| `pnpm generate`     | Compile contracts & generate clients             |\n| `pnpm deploy`       | Deploy contracts (watch mode)                    |\n| `pnpm deploy:ci`    | Deploy contracts (CI mode)                       |\n| `pnpm lint`         | Run Biome linter                                 |\n| `pnpm format`       | Format code with Biome                           |\n| `pnpm check-types`  | Type check with TypeScript                       |\n\n---\n\n## Testing & Linting\n\n- Run frontend tests (if present):\n\n  ```bash\n  pnpm test\n  ```\n\n- Lint and format code:\n\n  ```bash\n  pnpm lint\n  pnpm format\n  ```\n\n---\n\n## Troubleshooting\n\n- **Contract compilation errors**: Check your TypeScript contract code and ensure Algokit is installed.\n- **Deployment issues**: Verify `.env` secrets and network endpoints.\n- **Client generation**: Ensure contracts are compiled before generating clients.\n\n---\n\n## Resources\n\n- [Algorand Developer Portal](https://developer.algorand.org/)\n- [Algokit Documentation](https://github.com/algorandfoundation/algokit-cli)\n- [Next.js Documentation](https://nextjs.org/docs)\n- [TailwindCSS](https://tailwindcss.com/)\n- [Radix UI](https://www.radix-ui.com/)\n\n---",
      "type": "registry:lib",
      "target": "README.md"
    },
    {
      "path": "biome.json",
      "content": "{\n  \"$schema\": \"https://biomejs.dev/schemas/2.2.0/schema.json\",\n  \"vcs\": {\n    \"enabled\": true,\n    \"clientKind\": \"git\",\n    \"useIgnoreFile\": true\n  },\n  \"files\": {\n    \"ignoreUnknown\": true,\n    \"includes\": [\"**\", \"!node_modules\", \"!.next\", \"!dist\", \"!build\"]\n  },\n  \"formatter\": {\n    \"enabled\": true,\n    \"indentStyle\": \"space\",\n    \"indentWidth\": 2\n  },\n  \"linter\": {\n    \"enabled\": true,\n    \"rules\": {\n      \"recommended\": true\n    },\n    \"domains\": {\n      \"next\": \"recommended\",\n      \"react\": \"recommended\"\n    }\n  },\n  \"assist\": {\n    \"actions\": {\n      \"source\": {\n        \"organizeImports\": \"on\"\n      }\n    }\n  }\n}\n",
      "type": "registry:lib",
      "target": "biome.json"
    }
  ],
  "author": "Prathamesh Chougale",
  "title": "Algorand dApp Starter Kit"
}